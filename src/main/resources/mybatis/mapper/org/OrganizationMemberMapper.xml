<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tdoer.bedrock.serviceprovider.mapper.org.OrganizationMemberMapper">
  <resultMap id="BaseResultMap" type="com.tdoer.bedrock.serviceprovider.eo.org.OrganizationMemberEO">
    <id column="ID" jdbcType="BIGINT" property="id" />
    <result column="ORG_ID" jdbcType="BIGINT" property="orgId" />
    <result column="TENANT_ID" jdbcType="BIGINT" property="tenantId" />
    <result column="USER_ID" jdbcType="BIGINT" property="userId" />
    <result column="ROLE_IDS" jdbcType="VARCHAR" property="roleIds" />
    <result column="STATUS" jdbcType="VARCHAR" property="status" />
    <result column="CREATED_BY" jdbcType="BIGINT" property="createdBy" />
    <result column="CREATED_AT" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="UPDATED_BY" jdbcType="BIGINT" property="updatedBy" />
    <result column="UPDATED_AT" jdbcType="TIMESTAMP" property="updatedAt" />
  </resultMap>
  <sql id="Base_Column_List">
    ID, ORG_ID, TENANT_ID, USER_ID, ROLE_IDS, STATUS, CREATED_BY, CREATED_AT, UPDATED_BY, 
    UPDATED_AT
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from organization_member
    where ID = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from organization_member
    where ID = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyColumn="ID" keyProperty="id" parameterType="com.tdoer.bedrock.serviceprovider.eo.org.OrganizationMemberEO" useGeneratedKeys="true">
    insert into organization_member (ORG_ID, TENANT_ID, USER_ID, 
      ROLE_IDS, STATUS, CREATED_BY, 
      CREATED_AT, UPDATED_BY, UPDATED_AT
      )
    values (#{orgId,jdbcType=BIGINT}, #{tenantId,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, 
      #{roleIds,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{createdBy,jdbcType=BIGINT}, 
      #{createdAt,jdbcType=TIMESTAMP}, #{updatedBy,jdbcType=BIGINT}, #{updatedAt,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" keyColumn="ID" keyProperty="id" parameterType="com.tdoer.bedrock.serviceprovider.eo.org.OrganizationMemberEO" useGeneratedKeys="true">
    insert into organization_member
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="orgId != null">
        ORG_ID,
      </if>
      <if test="tenantId != null">
        TENANT_ID,
      </if>
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="roleIds != null">
        ROLE_IDS,
      </if>
      <if test="status != null">
        STATUS,
      </if>
      <if test="createdBy != null">
        CREATED_BY,
      </if>
      <if test="createdAt != null">
        CREATED_AT,
      </if>
      <if test="updatedBy != null">
        UPDATED_BY,
      </if>
      <if test="updatedAt != null">
        UPDATED_AT,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="orgId != null">
        #{orgId,jdbcType=BIGINT},
      </if>
      <if test="tenantId != null">
        #{tenantId,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="roleIds != null">
        #{roleIds,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="createdBy != null">
        #{createdBy,jdbcType=BIGINT},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null">
        #{updatedBy,jdbcType=BIGINT},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.tdoer.bedrock.serviceprovider.eo.org.OrganizationMemberEO">
    update organization_member
    <set>
      <if test="orgId != null">
        ORG_ID = #{orgId,jdbcType=BIGINT},
      </if>
      <if test="tenantId != null">
        TENANT_ID = #{tenantId,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        USER_ID = #{userId,jdbcType=BIGINT},
      </if>
      <if test="roleIds != null">
        ROLE_IDS = #{roleIds,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        STATUS = #{status,jdbcType=VARCHAR},
      </if>
      <if test="createdBy != null">
        CREATED_BY = #{createdBy,jdbcType=BIGINT},
      </if>
      <if test="createdAt != null">
        CREATED_AT = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null">
        UPDATED_BY = #{updatedBy,jdbcType=BIGINT},
      </if>
      <if test="updatedAt != null">
        UPDATED_AT = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    where ID = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tdoer.bedrock.serviceprovider.eo.org.OrganizationMemberEO">
    update organization_member
    set ORG_ID = #{orgId,jdbcType=BIGINT},
      TENANT_ID = #{tenantId,jdbcType=BIGINT},
      USER_ID = #{userId,jdbcType=BIGINT},
      ROLE_IDS = #{roleIds,jdbcType=VARCHAR},
      STATUS = #{status,jdbcType=VARCHAR},
      CREATED_BY = #{createdBy,jdbcType=BIGINT},
      CREATED_AT = #{createdAt,jdbcType=TIMESTAMP},
      UPDATED_BY = #{updatedBy,jdbcType=BIGINT},
      UPDATED_AT = #{updatedAt,jdbcType=TIMESTAMP}
    where ID = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectAll" resultMap="BaseResultMap">
    select * from organization_member
  </select>
  <select id="selectByExample" parameterType="com.tdoer.bedrock.serviceprovider.eo.org.OrganizationMemberEO" resultMap="BaseResultMap">
    select * from organization_member
    <where>
      <if test="id != null">
        and ID = #{id,jdbcType=BIGINT}
      </if>
      <if test="orgId != null">
        and ORG_ID = #{orgId,jdbcType=BIGINT}
      </if>
      <if test="tenantId != null">
        and TENANT_ID = #{tenantId,jdbcType=BIGINT}
      </if>
      <if test="userId != null">
        and USER_ID = #{userId,jdbcType=BIGINT}
      </if>
      <if test="roleIds != null">
        and ROLE_IDS = #{roleIds,jdbcType=VARCHAR}
      </if>
      <if test="status != null">
        and STATUS = #{status,jdbcType=VARCHAR}
      </if>
      <if test="createdBy != null">
        and CREATED_BY = #{createdBy,jdbcType=BIGINT}
      </if>
      <if test="createdAt != null">
        and CREATED_AT = #{createdAt,jdbcType=TIMESTAMP}
      </if>
      <if test="updatedBy != null">
        and UPDATED_BY = #{updatedBy,jdbcType=BIGINT}
      </if>
      <if test="updatedAt != null">
        and UPDATED_AT = #{updatedAt,jdbcType=TIMESTAMP}
      </if>
    </where>
  </select>
  <select id="countByEntityPrimaryKey" parameterType="com.tdoer.bedrock.serviceprovider.eo.org.OrganizationMemberEO" resultType="java.lang.Integer">
    select count(*) from organization_member where id=#{id,jdbcType=BIGINT}
  </select>
</mapper>